{"ast":null,"code":"var _jsxFileName = \"/home/mob_dq/Documents/DevProjects/CropAI/frontend/crop-ai/src/contexts/AuthContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { createUserWithEmailAndPassword, onAuthStateChanged, sendPasswordResetEmail, signInWithEmailAndPassword, signOut, sendEmailVerification } from \"firebase/auth\";\nimport { get, child, getDatabase, ref, set, remove } from \"firebase/database\";\nimport { auth } from \"../firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext();\nexport function useAuth() {\n  _s();\n\n  return useContext(AuthContext);\n}\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function AuthProvider(_ref) {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [currentUser, setCurrentUser] = useState();\n  const [loading, setLoading] = useState(true);\n  let usrFlag;\n  const dbRef = ref(getDatabase());\n\n  function splitEmail(email) {\n    const emailString = email.split(\"@\");\n    return emailString;\n  } //function to hash user id\n\n\n  function hashCode(str) {\n    return str.split(\"\").reduce((prevHash, currVal) => (prevHash << 5) - prevHash + currVal.charCodeAt(0) | 0, 0);\n  } //function to read user data to assign dash\n\n\n  function readUserData(email) {\n    const emailString = splitEmail(email);\n    let userList = [];\n    get(child(dbRef, `users/${emailString[0]}`)).then(snapshot => {\n      if (snapshot.exists()) {\n        let x = snapshot.val();\n\n        for (let id in x) {\n          userList.push(x[id]);\n        }\n\n        if (userList[0].split(\"-\")[0] === \"CL\") {\n          usrFlag = \"client\";\n        } else if (userList[0].split(\"-\")[0] === \"ADM\") {\n          usrFlag = \"admin\";\n        }\n      } else {\n        console.log(\"No data available\");\n      }\n    });\n    return usrFlag;\n  } //function  to write new users in realtime db\n\n\n  function writeUserData(email, encodedEmail) {\n    const db = getDatabase();\n    const emailString = splitEmail(email);\n    console.log(emailString);\n    set(ref(db, \"/users/\" + emailString[0]), {\n      UserId: encodedEmail,\n      email: email\n    });\n  } //Function to delete users from db\n\n\n  function delUserData(id) {\n    console.log(\"dele id from auth context\", id);\n    return remove(ref(getDatabase(), \"/users/\" + id));\n  } //function to signup new user\n\n\n  function signup(email, password, encodedEmail) {\n    writeUserData(email, encodedEmail);\n    return createUserWithEmailAndPassword(auth, email, password);\n  } //function to login existing user\n\n\n  function login(email, password) {\n    readUserData(email);\n    return signInWithEmailAndPassword(auth, email, password);\n  } //function to log out\n\n\n  function logout() {\n    return auth.signOut();\n  } //function to verify email\n\n\n  function verifyEmail() {\n    return sendEmailVerification(auth.currentUser);\n  } //function to reset user password\n\n\n  function resetPassword(email) {\n    return sendPasswordResetEmail(auth, email);\n  }\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      setCurrentUser(user);\n      setLoading(false);\n    });\n    return unsubscribe;\n  }, []);\n  const value = {\n    currentUser,\n    signup,\n    login,\n    logout,\n    verifyEmail,\n    resetPassword,\n    hashCode,\n    usrFlag,\n    readUserData,\n    writeUserData\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(AuthProvider, \"1cdeWWSmbSz3cOWqWLAt+Ta4DMY=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","useContext","useEffect","useState","createUserWithEmailAndPassword","onAuthStateChanged","sendPasswordResetEmail","signInWithEmailAndPassword","signOut","sendEmailVerification","get","child","getDatabase","ref","set","remove","auth","AuthContext","createContext","useAuth","AuthProvider","children","currentUser","setCurrentUser","loading","setLoading","usrFlag","dbRef","splitEmail","email","emailString","split","hashCode","str","reduce","prevHash","currVal","charCodeAt","readUserData","userList","then","snapshot","exists","x","val","id","push","console","log","writeUserData","encodedEmail","db","UserId","delUserData","signup","password","login","logout","verifyEmail","resetPassword","unsubscribe","user","value"],"sources":["/home/mob_dq/Documents/DevProjects/CropAI/frontend/crop-ai/src/contexts/AuthContext.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport {\n  createUserWithEmailAndPassword,\n  onAuthStateChanged,\n  sendPasswordResetEmail,\n  signInWithEmailAndPassword,\n  signOut,\n  sendEmailVerification,\n} from \"firebase/auth\";\nimport { get, child, getDatabase, ref, set, remove } from \"firebase/database\";\nimport { auth } from \"../firebase\";\n\nconst AuthContext = React.createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState();\n  const [loading, setLoading] = useState(true);\n\n  let usrFlag;\n  const dbRef = ref(getDatabase());\n\n  function splitEmail(email) {\n    const emailString = email.split(\"@\");\n    return emailString;\n  }\n  //function to hash user id\n  function hashCode(str) {\n    return str\n      .split(\"\")\n      .reduce(\n        (prevHash, currVal) =>\n          ((prevHash << 5) - prevHash + currVal.charCodeAt(0)) | 0,\n        0\n      );\n  }\n  //function to read user data to assign dash\n  function readUserData(email) {\n    const emailString = splitEmail(email);\n    let userList = [];\n    get(child(dbRef, `users/${emailString[0]}`)).then((snapshot) => {\n      if (snapshot.exists()) {\n        let x = snapshot.val();\n        for (let id in x) {\n          userList.push(x[id]);\n        }\n\n        if (userList[0].split(\"-\")[0] === \"CL\") {\n          usrFlag = \"client\";\n        } else if (userList[0].split(\"-\")[0] === \"ADM\") {\n          usrFlag = \"admin\";\n        }\n      } else {\n        console.log(\"No data available\");\n      }\n    });\n    return usrFlag;\n  }\n  //function  to write new users in realtime db\n  function writeUserData(email, encodedEmail) {\n    const db = getDatabase();\n    const emailString = splitEmail(email);\n    console.log(emailString);\n    set(ref(db, \"/users/\" + emailString[0]), {\n      UserId: encodedEmail,\n      email: email,\n    });\n  }\n\n  //Function to delete users from db\n  function delUserData(id) {\n    console.log(\"dele id from auth context\", id);\n    return remove(ref(getDatabase(), \"/users/\" + id));\n  }\n  //function to signup new user\n  function signup(email, password, encodedEmail) {\n    writeUserData(email, encodedEmail);\n    return createUserWithEmailAndPassword(auth, email, password);\n  }\n  //function to login existing user\n  function login(email, password) {\n    readUserData(email);\n    return signInWithEmailAndPassword(auth, email, password);\n  }\n  //function to log out\n  function logout() {\n    return auth.signOut();\n  }\n  //function to verify email\n  function verifyEmail() {\n    return sendEmailVerification(auth.currentUser);\n  }\n  //function to reset user password\n  function resetPassword(email) {\n    return sendPasswordResetEmail(auth, email);\n  }\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      setCurrentUser(user);\n      setLoading(false);\n    });\n    return unsubscribe;\n  }, []);\n\n  const value = {\n    currentUser,\n    signup,\n    login,\n    logout,\n    verifyEmail,\n    resetPassword,\n    hashCode,\n    usrFlag,\n    readUserData,\n    writeUserData,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}